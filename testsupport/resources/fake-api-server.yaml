# vscode-kubernetes-tools: exclude
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: all-good
  namespace: test
spec:
  rules:
  - host: all-good.test
    http:
      paths:
      - backend:
          service:
            name: deploy-all-good
            port:
              number: 8080
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
  name: nginx
  resourceVersion: "1297"
  uid: a7184ba7-e40c-413b-ae9a-b2a6325e317b
spec:
  controller: k8s.io/ingress-nginx 
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  namespace: test
  name: all-good
spec:
  port:
    targetPort: http
  to:
    kind: Service
    name: all-good
    weight: 100
  wildcardPolicy: None
status:
  ingress:
  - conditions:
    - status: "True"
      type: Admitted
    routerName: default
    wildcardPolicy: None
---
apiVersion: v1
kind: Service
metadata:
  namespace: test
  name: all-good
  labels:
    app: all-good
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: all-good
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: http
---
apiVersion: v1
kind: Pod
metadata:
  namespace: test
  name: all-good-785d8bcc5f-g92mn
  labels:
    app: all-good
spec:
  containers:
  - name: unused
    image: caddy:2
    imagePullPolicy: IfNotPresent
    ports:
    - containerPort: 8079
      name: unused
      protocol: TCP
    resources:
      limits:
        cpu: 500m
        memory: 100Mi
      requests:
        cpu: 100m
        memory: 20Mi
    volumeMounts:
    - name: caddy-config
      mountPath: "/etc/caddy"
    - name: caddy-config-cache
      mountPath: "/config/caddy"
  - name: default
    image: caddy:2
    imagePullPolicy: IfNotPresent
    ports:
    - containerPort: 8080
      name: http
      protocol: TCP
    resources:
      limits:
        cpu: 500m
        memory: 100Mi
      requests:
        cpu: 100m
        memory: 20Mi
    securityContext:
      runAsNonRoot: true
    volumeMounts:
    - name: caddy-config
      mountPath: "/etc/caddy"
    - name: caddy-config-cache
      mountPath: "/config/caddy"
  securityContext:
    runAsUser: 1003870000
  serviceAccount: default
  serviceAccountName: default
  volumes:
    - name: caddy-config
      configMap:
        name: caddy-config
    - name: caddy-config-cache
      emptyDir: {}
status:
  conditions:
  - status: "True"
    type: Ready
  - status: "True"
    type: ContainersReady
  containerStatuses:
  - containerID: cri-o://64e3a26a03c637f59812fc36dd000f2fd7f2807751ea28e852459bc50cb18e5e
    image: docker.io/library/caddy:2
    imageID: docker.io/library/caddy@sha256:7992b931b7da3cf0840dd69ea74b2c67d423faf03408da8abdc31b7590a239a7
    name: default
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2022-10-30T17:44:26Z"
---
apiVersion: v1
kind: Pod
metadata:
  namespace: test
  name: all-good-785d8bcc5f-x85p2
  labels:
    app: all-good
spec:
  containers:
  - image: caddy:2
    imagePullPolicy: IfNotPresent
    name: default
    ports:
    - containerPort: 8080
      name: http
      protocol: TCP
    resources:
      limits:
        cpu: 500m
        memory: 100Mi
      requests:
        cpu: 100m
        memory: 20Mi
    securityContext:
      runAsNonRoot: true
    volumeMounts:
    - name: caddy-config
      mountPath: "/etc/caddy"
    - name: caddy-config-cache
      mountPath: "/config/caddy"
  securityContext:
    runAsUser: 1003870000
  serviceAccount: default
  serviceAccountName: default
  volumes:
    - name: caddy-config
      configMap:
        name: caddy-config
    - name: caddy-config-cache
      emptyDir: {}
status:
  conditions:
  - status: "True"
    type: Initialized
  - status: "True"
    type: Ready
  - status: "True"
    type: ContainersReady
  - status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: cri-o://49b44cde9c692c119fe00766bb61af154175ccbdeee376c6b3a439b30e407be9
    image: docker.io/library/caddy:2
    imageID: docker.io/library/caddy@sha256:2b5eaec58eda7e9c2cbcf317c6e5fbfa5507a60d323967e24f686e3619330dc9
    name: default
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2022-10-30T17:44:27Z"
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: test
  name: caddy-config
data:
  Caddyfile: |-
    http://:8080

    respond "Everything is fine!"
---
# other resources
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  namespace: test
  name: rs-1
  labels:
    app: rs-1
    more: cookies
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rs-1
  template:
    metadata:
      labels:
        app: rs-1
    spec:
      containers:
      - name: default
        image: caddy:2
        imagePullPolicy: Always
      serviceAccount: default
      serviceAccountName: default
---      
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  namespace: test
  name: rs-2
  labels:
    app: rs-2
    more: cookies
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rs-2
  template:
    metadata:
      labels:
        app: rs-2
    spec:
      containers:
      - name: default
        image: caddy:2
        imagePullPolicy: Always
      serviceAccount: default
      serviceAccountName: default
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: statefulset-all-good
  name: statefulset-all-good
  namespace: test
  uid: 24020d6f-e7fb-40b8-88ae-45134c7e4084
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: statefulset-all-good
  serviceName: ""
  template:
    metadata:
      labels:
        app: statefulset-all-good
    spec:
      containers:
      - image: caddy:2
        imagePullPolicy: IfNotPresent
        name: default
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 20Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        securityContext:
          runAsNonRoot: true
        volumeMounts:
        - mountPath: /etc/caddy
          name: caddy-config
        - mountPath: /config/caddy
          name: caddy-config-cache
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsUser: 1003870000
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: caddy-config-port-8080
        name: caddy-config
      - emptyDir: {}
        name: caddy-config-cache
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: caddy-config-cache
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: gp2
      volumeMode: Filesystem
    status:
      phase: Pending
status:
  availableReplicas: 1
  collisionCount: 0
  currentReplicas: 1
  currentRevision: statefulset-all-good-78d8b8dbc8
  observedGeneration: 3
  readyReplicas: 1
  replicas: 1
  updateRevision: statefulset-all-good-78d8b8dbc8
  updatedReplicas: 1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  generation: 1
  labels:
    app: sts-sa-notfound
  name: sts-sa-notfound
  namespace: test
  uid: c9af6dbb-e7ed-46c7-a97c-3e174b77a470
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: sts-sa-notfound
  serviceName: ""
  template:
    metadata:
      labels:
        app: sts-sa-notfound
    spec:
      containers:
      - image: caddy:2
        imagePullPolicy: IfNotPresent
        name: default
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 20Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        securityContext:
          runAsNonRoot: true
        volumeMounts:
        - mountPath: /etc/caddy
          name: caddy-config
        - mountPath: /config/caddy
          name: caddy-config-cache
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsUser: 1003870000
      serviceAccount: unknown
      serviceAccountName: unknown
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: caddy-config-port-8080
        name: caddy-config
      - emptyDir: {}
        name: caddy-config-cache
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: caddy-config-cache
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: gp2
      volumeMode: Filesystem
    status:
      phase: Pending
status:
  availableReplicas: 0
  replicas: 0
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  finalizers:
  - kubernetes.io/pvc-protection
  labels:
    app: statefulset-all-good
  name: caddy-config-cache-statefulset-all-good-0
  namespace: test
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: gp2
  volumeMode: Filesystem
  volumeName: pvc-c06d806f-507b-4d0e-a40e-7be6f8480fc2
status:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 1Gi
  phase: Bound
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
  name: gp2
allowVolumeExpansion: true
parameters:
  encrypted: "true"
  type: gp2
provisioner: kubernetes.io/aws-ebs
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: Event
metadata:
  namespace: test
  name: readiness-probe-error-6cb7664768-qlmns.17276445166d1359
  resourceVersion: "1715384686"
  uid: 5fc5066a-216d-4ef5-a17e-5d70e5ba11d1
type: Warning
lastTimestamp: "2022-11-13T21:55:27Z"
count: 22
message: 'Readiness probe failed: HTTP probe failed with statuscode: 404'
reason: Unhealthy
involvedObject:
  apiVersion: v1
  fieldPath: spec.containers{default}
  kind: Pod
  namespace: test
  name: readiness-probe-error-6cb7664768-qlmns
  uid: c188fba1-0304-4686-a67c-17db71548c6f
  resourceVersion: "277004"