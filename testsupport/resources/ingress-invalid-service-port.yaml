---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  generation: 1
  labels:
    app: invalid-service-port
  name: invalid-service-port
  namespace: test
  uid: b70d5692-60bf-4a2a-9d6d-e2ab08cdc740
spec:
  rules:
  - host: invalid-service-port.test
    http:
      paths:
      - backend:
          service:
            name: invalid-service-port 
            port:
              number: 8081 #invalid
        path: /
        pathType: Prefix
status:
  loadBalancer:
    ingress:
    - hostname: router-default.cluster.com
---
apiVersion: apps/v1
kind: Deployment
metadata:
  generation: 1
  labels:
    app: invalid-service-port
  name: invalid-service-port
  namespace: test
  uid: f94be8cb-3dab-410e-be45-c6a479594d9a
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: invalid-service-port
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: invalid-service-port
    spec:
      containers:
      - image: caddy:2
        imagePullPolicy: IfNotPresent
        name: default
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 20Mi
        securityContext:
          runAsNonRoot: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/caddy
          name: caddy-config
        - mountPath: /config/caddy
          name: caddy-config-cache
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsUser: 1003870000
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: caddy-config-port-8080
        name: caddy-config
      - emptyDir: {}
        name: caddy-config-cache
status:
  availableReplicas: 1
  conditions:
  - message: ReplicaSet "invalid-service-port-5ffc9c56cd" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  - message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  observedGeneration: 3
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: invalid-service-port
  name: invalid-service-port
  namespace: test
  uid: 64491c67-561f-4367-9d62-e50bf73ae307
spec:
  clusterIP: 172.30.109.7
  clusterIPs:
  - 172.30.109.7
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: http
  selector:
    app: invalid-service-port
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  annotations:
    deployment.kubernetes.io/desired-replicas: "1"
    deployment.kubernetes.io/max-replicas: "2"
    deployment.kubernetes.io/revision: "1"
  generation: 1
  labels:
    app: invalid-service-port
    pod-template-hash: 5ffc9c56cd
  name: invalid-service-port-5ffc9c56cd
  namespace: test
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: Deployment
    name: invalid-service-port
    uid: f94be8cb-3dab-410e-be45-c6a479594d9a
  uid: 1431366e-ebfa-4f47-9255-e550eb1f214e
spec:
  replicas: 1
  selector:
    matchLabels:
      app: invalid-service-port
      pod-template-hash: 5ffc9c56cd
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: invalid-service-port
        pod-template-hash: 5ffc9c56cd
    spec:
      containers:
      - image: caddy:2
        imagePullPolicy: IfNotPresent
        name: default
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 20Mi
        securityContext:
          runAsNonRoot: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/caddy
          name: caddy-config
        - mountPath: /config/caddy
          name: caddy-config-cache
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsUser: 1003870000
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: caddy-config-port-8080
        name: caddy-config
      - emptyDir: {}
        name: caddy-config-cache
status:
  availableReplicas: 1
  fullyLabeledReplicas: 1
  observedGeneration: 3
  readyReplicas: 1
  replicas: 1
---
apiVersion: v1
kind: Pod
metadata:
  generateName: invalid-service-port-5ffc9c56cd-
  labels:
    app: invalid-service-port
    pod-template-hash: 5ffc9c56cd
  name: invalid-service-port-5ffc9c56cd-zxjw6
  namespace: test
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: invalid-service-port-5ffc9c56cd
    uid: 1431366e-ebfa-4f47-9255-e550eb1f214e
  uid: b7db2635-02e4-4dd0-a18e-ace0c0a8215a
spec:
  containers:
  - image: caddy:2
    imagePullPolicy: IfNotPresent
    name: default
    ports:
    - containerPort: 8080
      name: http
      protocol: TCP
    resources:
      limits:
        cpu: 500m
        memory: 100Mi
      requests:
        cpu: 100m
        memory: 20Mi
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /etc/caddy
      name: caddy-config
    - mountPath: /config/caddy
      name: caddy-config-cache
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-td7j2
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  imagePullSecrets:
  - name: default-dockercfg-r6jhg
  preemptionPolicy: PreemptLowerPriority
  priority: -3
  priorityClassName: sandbox-users-pods
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext:
    fsGroup: 1003870000
    runAsUser: 1003870000
    seLinuxOptions:
      level: s0:c62,c44
    seccompProfile:
      type: RuntimeDefault
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  - effect: NoSchedule
    key: node.kubernetes.io/memory-pressure
    operator: Exists
  volumes:
  - configMap:
      defaultMode: 420
      name: caddy-config-port-8080
    name: caddy-config
  - emptyDir: {}
    name: caddy-config-cache
  - name: kube-api-access-td7j2
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
      - configMap:
          items:
          - key: service-ca.crt
            path: service-ca.crt
          name: openshift-service-ca.crt
status:
  conditions:
  - status: "True"
    type: Initialized
  - status: "True"
    type: Ready
  - status: "True"
    type: ContainersReady
  - status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: cri-o://bf8c41bb6f918f1aca7b94c4de83e3a193b16b0f756f25bff50e5adfe15d9fa5
    image: docker.io/library/caddy:2
    imageID: docker.io/library/caddy@sha256:50743fc6130295e9e8feccd8b2f437d8c472f626bf277dc873734ed98219f44f
    lastState: {}
    name: default
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2022-12-16T06:37:55Z"
  phase: Running
  startTime: "2022-12-16T06:37:52Z"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: caddy-config-port-8080
data:
  Caddyfile: |-
    http://:8080

    respond "Everything is fine!"